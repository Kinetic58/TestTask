from aiogram import Router
from aiogram.types import CallbackQuery
from utils.keyboards import main_menu, smi_menu, weather_cities_menu, currency_menu
from utils.parser import get_weather, get_currency_rate
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import time

router = Router()

@router.callback_query(lambda c: c.data == "menu:smi")
async def fast_info(callback: CallbackQuery):
    await callback.message.edit_text(
        "<b>üîπ –ë—ã—Å—Ç—Ä–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –±—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø–æ–≥–æ–¥–µ –∏ –∫—É—Ä—Å–∞–º –≤–∞–ª—é—Ç. "
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ ‚¨áÔ∏è",
        parse_mode="HTML",
        reply_markup=smi_menu()
    )

@router.callback_query(lambda c: c.data == "weather:smi")
async def weather_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "<b>üå§ –í—ã–±–æ—Ä –≥–æ—Ä–æ–¥–∞</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –ø–æ–≥–æ–¥—É. "
        "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ —Ä—è–¥–æ–º —Å –Ω–∏–º –ø–æ—è–≤–∏—Ç—Å—è –≥–∞–ª–æ—á–∫–∞ ‚úÖ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞.",
        parse_mode="HTML",
        reply_markup=weather_cities_menu()
    )

@router.callback_query(lambda c: c.data.startswith("city:"))
async def get_weather_callback(callback: CallbackQuery):
    start_time = time.perf_counter()
    city_key = callback.data.split(":")[1]
    city_names = {"moscow": "–ú–æ—Å–∫–≤–∞", "spb": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "nsk": "–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫"}
    await callback.answer("‚è≥ –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–≥–æ–¥—ã...")
    try:
        weather_info = await get_weather(city_key)
        if not weather_info:
            raise ValueError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
    except Exception as e:
        weather_info = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ ‚òÅÔ∏è\n–û—à–∏–±–∫–∞: {e}"

    elapsed = time.perf_counter() - start_time

    text = (
        f"<b>üå§ –ü–æ–≥–æ–¥–∞ –≤ {city_names.get(city_key, city_key.capitalize())}</b>\n\n"
        f"{weather_info}\n\n"
        f"‚è± –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {elapsed:.2f} —Å–µ–∫\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π –≥–æ—Ä–æ–¥ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    )
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=weather_cities_menu(selected_city=city_key)
    )

@router.callback_query(lambda c: c.data == "currency:smi")
async def currency_menu_main(callback: CallbackQuery):
    await callback.message.edit_text(
        "<b>üí± –í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –∫—É—Ä—Å. "
        "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞–ª—é—Ç–∞ –±—É–¥–µ—Ç –æ—Ç–º–µ—á–µ–Ω–∞ –≥–∞–ª–æ—á–∫–æ–π ‚úÖ.",
        parse_mode="HTML",
        reply_markup=currency_menu()
    )

@router.callback_query(lambda c: c.data.startswith("currency:"))
async def get_currency_callback(callback: CallbackQuery):
    start_time = time.perf_counter()
    currency = callback.data.split(":")[1]
    await callback.answer("‚è≥ –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç...")
    try:
        rate_info = await get_currency_rate(currency)
        if not rate_info:
            raise ValueError("–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API")
    except Exception as e:
        rate_info = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ üí±\n–û—à–∏–±–∫–∞: {e}"

    elapsed = time.perf_counter() - start_time

    text = (
        f"<b>üí± –ö—É—Ä—Å {currency}</b>\n\n"
        f"{rate_info}\n\n"
        f"‚è± –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞: {elapsed:.2f} —Å–µ–∫\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é."
    )
    await callback.message.edit_text(
        text,
        parse_mode="HTML",
        reply_markup=currency_menu(selected_currency=currency)
    )
