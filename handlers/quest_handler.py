from aiogram import Router, types
from aiogram.types import CallbackQuery
from utils.keyboards import quest_question_kb, return_to_menu_kb
from database_function.db_core import get_db
from database_function.models import QuestProgress, Leaderboard
from sqlalchemy import select, insert, update
from aiogram.fsm.context import FSMContext
import random

from utils.list import QUEST

router = Router()

def get_random_questions(count=10):
    return random.sample(QUEST, min(count, len(QUEST)))


@router.callback_query(lambda c: c.data and c.data.startswith("menu:quest"))
async def quest_start(callback: CallbackQuery):
    tg_id = callback.from_user.id
    async with get_db() as session:
        q = select(QuestProgress).where(QuestProgress.tg_id == tg_id)
        res = await session.execute(q)
        existing = res.scalar_one_or_none()

        if existing:
            await session.execute(
                update(QuestProgress).where(QuestProgress.tg_id == tg_id)
                .values(step=0, score=0, answers=None)
            )
            await session.commit()
        else:
            new = QuestProgress(tg_id=tg_id, step=0, score=0)
            session.add(new)
            await session.commit()

    user_questions = get_random_questions(10)
    first = user_questions[0]

    await callback.message.edit_text(
        f"<b>üéØ –ú–∏–Ω–∏-–∫–≤–µ—Å—Ç —Å—Ç–∞—Ä—Ç—É–µ—Ç!</b>\n\n"
        f"<i>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {first['category']}</i>\n\n"
        f"{first['q']}",
        parse_mode="HTML",
        reply_markup=quest_question_kb(first["options"], 1)
    )


@router.callback_query(lambda c: c.data and c.data.startswith("quest:answer:"))
async def quest_answer(callback: CallbackQuery, state: FSMContext):
    parts = callback.data.split(":")
    if len(parts) != 4:
        await callback.answer("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    _, _type, qid_s, opt_s = parts
    qid = int(qid_s)
    optidx = int(opt_s)
    tg_id = callback.from_user.id

    async with get_db() as session:
        q = select(QuestProgress).where(QuestProgress.tg_id == tg_id)
        res = await session.execute(q)
        prog = res.scalar_one_or_none()

        if not prog:
            await callback.answer(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ –∫–≤–µ—Å—Ç (/start -> –ü—Ä–æ–π—Ç–∏ –∫–≤–µ—Å—Ç).",
                show_alert=True
            )
            return

        user_questions = get_random_questions(10)

        idx = qid - 1
        if 0 <= idx < len(user_questions):
            point = 1 if user_questions[idx]["correct"] == optidx else 0
            new_score = prog.score + point
            new_step = prog.step + 1
            new_answers = (prog.answers or "") + f"{qid}:{optidx}({point});"

            await session.execute(
                update(QuestProgress)
                .where(QuestProgress.tg_id == tg_id)
                .values(step=new_step, score=new_score, answers=new_answers)
            )
            await session.commit()

            if new_step < len(user_questions):
                nxt = user_questions[new_step]
                await callback.message.edit_text(
                    f"<i>–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {nxt['category']}</i>\n\n"
                    f"{nxt['q']}",
                    parse_mode="HTML",
                    reply_markup=quest_question_kb(nxt["options"], new_step + 1)
                )
            else:
                await finish_quest(callback, tg_id, new_score)
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –≤–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)


async def finish_quest(callback: CallbackQuery, tg_id: int, score: int):
    async with get_db() as session:
        stmt = insert(Leaderboard).values(
            tg_id=tg_id,
            username=callback.from_user.username,
            score=score
        )
        await session.execute(stmt)
        await session.commit()

    total_questions = 10

    percentage = (score / total_questions) * 100
    if percentage >= 90:
        grade = "üéñÔ∏è –û—Ç–ª–∏—á–Ω–æ!"
    elif percentage >= 70:
        grade = "ü•à –•–æ—Ä–æ—à–æ"
    elif percentage >= 50:
        grade = "ü•â –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ"
    else:
        grade = "üìö –ï—Å—Ç—å –Ω–∞–¥ —á–µ–º –ø–æ—Ä–∞–±–æ—Ç–∞—Ç—å"

    text = (
        f"üéâ <b>–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º –∫–≤–µ—Å—Ç–∞!</b>\n\n"
        f"üìä <b>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç:</b> {score}/{total_questions}\n"
        f"üìà <b>–ü—Ä–æ—Ü–µ–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤:</b> {percentage:.1f}%\n"
        f"üèÜ <b>–û—Ü–µ–Ω–∫–∞:</b> {grade}\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –∫–≤–µ—Å—Ç —Å–Ω–æ–≤–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã!"
    )

    await callback.message.edit_text(text, parse_mode="HTML", reply_markup=return_to_menu_kb())


@router.callback_query(lambda c: c.data and c.data == "quest:finish")
async def quest_finish(callback: CallbackQuery):
    tg_id = callback.from_user.id
    async with get_db() as session:
        q = select(QuestProgress).where(QuestProgress.tg_id == tg_id)
        res = await session.execute(q)
        prog = res.scalar_one_or_none()
        score = prog.score if prog else 0

    await callback.message.edit_text(
        f"‚ö†Ô∏è <b>–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∫–≤–µ—Å—Ç –¥–æ—Å—Ä–æ—á–Ω–æ</b>\n\n"
        f"üìä –í–∞—à–∏ –æ—á–∫–∏: <b>{score}/10</b>\n\n"
        "–í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏ –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –Ω–∞–±—Ä–∞—Ç—å –±–æ–ª—å—à–µ –æ—á–∫–æ–≤!",
        parse_mode="HTML",
        reply_markup=return_to_menu_kb()
    )