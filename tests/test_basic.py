import httpx
import asyncio
import json

from cnf.config import HF_TOKEN


async def test_connection():
    try:
        async with httpx.AsyncClient(timeout=10) as client:
            r = await client.get("https://www.cbr-xml-daily.ru/daily_json.js")
            print(r.status_code, r.json()["Date"])
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", e)


async def get_currency_rate(currency: str) -> str:
    try:
        if currency in ["USD", "EUR"]:
            url = "https://www.cbr-xml-daily.ru/daily_json.js"
            async with httpx.AsyncClient(timeout=10) as client:
                r = await client.get(url)
                data = r.json()
                val = data["Valute"][currency]["Value"]
            return f"–ö—É—Ä—Å {currency}: {val} ‚ÇΩ"
        else:
            return "–í–∞–ª—é—Ç–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è"
    except Exception as e:
        return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: {e}"


async def test_hf_token_interactive():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç —Ç–æ–∫–µ–Ω–∞ Hugging Face"""

    print("ü§ó Hugging Face Token Setup")
    print("=" * 50)

    # –ó–∞–ø—Ä–æ—Å —Ç–æ–∫–µ–Ω–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    token = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–≤—ã–π Hugging Face token (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å hf_): ").strip()

    if not token.startswith('hf_'):
        print("‚ùå –¢–æ–∫–µ–Ω –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'hf_'")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    url = "https://huggingface.co/api/whoami"
    headers = {"Authorization": f"Bearer {token}"}

    try:
        async with httpx.AsyncClient(timeout=10) as client:
            print("\nüîê –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω...")
            resp = await client.get(url, headers=headers)

            if resp.status_code == 200:
                user_info = resp.json()
                print("‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª–∏–¥–µ–Ω!")
                print(f"üë§ –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_info.get('name', 'Unknown')}")
                print(f"üìß Email: {user_info.get('email', 'Not provided')}")
                print(f"üîë –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è: {user_info.get('org', 'Personal account')}")

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ config.py
                save_to_config = input("\nüíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω –≤ config.py? (y/n): ").strip().lower()
                if save_to_config == 'y':
                    config_content = f'# Hugging Face Token\nHF_TOKEN = "{token}"'

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ config.py
                    config_path = "cnf/config.py"

                    try:
                        with open(config_path, 'w', encoding='utf-8') as f:
                            f.write(config_content)
                        print(f"‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {config_path}")
                    except Exception as e:
                        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
                        print(f"üìù –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è config.py:\n{config_content}")

            else:
                print(f"‚ùå –¢–æ–∫–µ–Ω –Ω–µ–≤–∞–ª–∏–¥–µ–Ω: {resp.status_code}")
                print(f"–û—à–∏–±–∫–∞: {resp.text}")

    except Exception as e:
        print(f"üí• –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")


async def test_models_with_token(token: str):
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏...")

    # –ü—Ä–æ—Å—Ç—ã–µ –∏ –Ω–∞–¥–µ–∂–Ω—ã–µ –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–µ—Å—Ç–∞
    test_models = [
        {
            "name": "Sentiment Analysis",
            "url": "https://api-inference.huggingface.co/models/distilbert-base-uncased-finetuned-sst-2-english",
            "payload": {"inputs": "I love this movie!"}
        },
        {
            "name": "Text Embedding",
            "url": "https://api-inference.huggingface.co/models/sentence-transformers/all-MiniLM-L6-v2",
            "payload": {"inputs": "Hello world test"}
        }
    ]

    headers = {"Authorization": f"Bearer {token}"}

    for model in test_models:
        print(f"\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º: {model['name']}")

        try:
            async with httpx.AsyncClient(timeout=30) as client:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –º–æ–¥–µ–ª–∏
                status_resp = await client.get(model['url'], headers=headers)

                if status_resp.status_code == 200:
                    print("   ‚úÖ –ú–æ–¥–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞")

                    # –ü—Ä–æ–±—É–µ–º —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å
                    resp = await client.post(model['url'], headers=headers, json=model['payload'])

                    if resp.status_code == 200:
                        print("   ‚úÖ –ó–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω!")
                        result = resp.json()
                        print(f"   üìä –†–µ–∑—É–ª—å—Ç–∞—Ç: {str(result)[:100]}...")
                    elif resp.status_code == 503:
                        print("   ‚è≥ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...")
                    else:
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {resp.status_code}")
                else:
                    print(f"   ‚ùå –ú–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {status_resp.status_code}")

        except Exception as e:
            print(f"   üí• –û—à–∏–±–∫–∞: {e}")


if __name__ == "__main__":
    asyncio.run(test_hf_token_interactive())